/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package form;
import com.microsoft.sqlserver.jdbc.SQLServerDataSource;
import java.awt.Color;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import javax.swing.table.DefaultTableModel;
import java.sql.*;
import javax.swing.JOptionPane;

import connectDB.ConnectDB;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import javax.swing.DefaultComboBoxModel;
import javax.swing.ImageIcon;
import javax.swing.JComboBox;
import javax.swing.JDialog;
import javax.swing.JPanel;
//import java.util.Date;

/**
 *
 * @author User
 */






public class frmGuessForm extends javax.swing.JFrame {
    
    //Attribute
    ConnectDB con;
    DateFormat dateFormat;
    

    /**
     * Creates new form frmMainForm
     */
    public frmGuessForm() {
        initComponents();
        con = new ConnectDB();
        dateFormat = new SimpleDateFormat("yyyy-MM-dd");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unkiemtraed")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        frmCTHD = new javax.swing.JFrame();
        pnlCTHD = new javax.swing.JPanel();
        pnlDetailsCTHD = new javax.swing.JPanel();
        jLabel45 = new javax.swing.JLabel();
        txtSoHD_CTHD = new javax.swing.JTextField();
        jLabel46 = new javax.swing.JLabel();
        txtMaSP_CTHD = new javax.swing.JTextField();
        jLabel47 = new javax.swing.JLabel();
        txtSL = new javax.swing.JTextField();
        pnlBtnsHoaDon1 = new javax.swing.JPanel();
        btnLoadCTHD = new javax.swing.JButton();
        btnThemCTHD = new javax.swing.JButton();
        btnSuaCTHD = new javax.swing.JButton();
        btnXoaCTHD = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        pnlSearchCTHD = new javax.swing.JPanel();
        btnTimCTHD = new javax.swing.JButton();
        pnlSearchCTHDInput = new javax.swing.JPanel();
        jLabel50 = new javax.swing.JLabel();
        txtSearchSoHD_CTHD = new javax.swing.JTextField();
        jLabel51 = new javax.swing.JLabel();
        txtSearchMaSP_CTHD = new javax.swing.JTextField();
        jLabel52 = new javax.swing.JLabel();
        txtSearchSL = new javax.swing.JTextField();
        pnlTableCTHD = new javax.swing.JScrollPane();
        tblCTHD = new javax.swing.JTable();
        btnBack = new javax.swing.JButton();
        mainPanel = new javax.swing.JPanel();
        tabPanel = new javax.swing.JTabbedPane();
        pnlHoaDon = new javax.swing.JPanel();
        pnlDetailsHoaDon = new javax.swing.JPanel();
        jLabel34 = new javax.swing.JLabel();
        txtSoHD = new javax.swing.JTextField();
        jLabel35 = new javax.swing.JLabel();
        jLabel39 = new javax.swing.JLabel();
        txtMaKH_HD = new javax.swing.JTextField();
        jLabel40 = new javax.swing.JLabel();
        txtTriGia = new javax.swing.JTextField();
        jLabel41 = new javax.swing.JLabel();
        txtMaNV_HD = new javax.swing.JTextField();
        pnlBtnsHoaDon = new javax.swing.JPanel();
        btnLoadHD = new javax.swing.JButton();
        btnThemHD = new javax.swing.JButton();
        btnSuaHD = new javax.swing.JButton();
        btnXoaHD = new javax.swing.JButton();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        dpNgayHD = new org.jdesktop.swingx.JXDatePicker();
        pnlSearchHoaDon = new javax.swing.JPanel();
        btnTimHD = new javax.swing.JButton();
        pnlSearchHoaDonInput = new javax.swing.JPanel();
        jLabel42 = new javax.swing.JLabel();
        txtSearchSoHD = new javax.swing.JTextField();
        jLabel43 = new javax.swing.JLabel();
        txtSearchMaKH_HD = new javax.swing.JTextField();
        jLabel44 = new javax.swing.JLabel();
        txtSearchMaNV_HD = new javax.swing.JTextField();
        pnlTableHoaDon = new javax.swing.JScrollPane();
        tblHoaDon = new javax.swing.JTable();
        pnlSanPham = new javax.swing.JPanel();
        pnlDetailsSanPham = new javax.swing.JPanel();
        jLabel29 = new javax.swing.JLabel();
        txtMaSP = new javax.swing.JTextField();
        jLabel30 = new javax.swing.JLabel();
        txtTenSP = new javax.swing.JTextField();
        jLabel31 = new javax.swing.JLabel();
        txtDonViTinh = new javax.swing.JTextField();
        jLabel32 = new javax.swing.JLabel();
        txtNuocSX = new javax.swing.JTextField();
        jLabel33 = new javax.swing.JLabel();
        txtGiaSP = new javax.swing.JTextField();
        pnlBtnsSanPham = new javax.swing.JPanel();
        btnLoadSP = new javax.swing.JButton();
        btnThemSP = new javax.swing.JButton();
        btnSuaSP = new javax.swing.JButton();
        btnXoaSP = new javax.swing.JButton();
        pnlSearchSanPham = new javax.swing.JPanel();
        btnTimSP = new javax.swing.JButton();
        pnlSearchSanPhamInput = new javax.swing.JPanel();
        jLabel36 = new javax.swing.JLabel();
        txtSearchTenSP = new javax.swing.JTextField();
        jLabel37 = new javax.swing.JLabel();
        txtSearchMaSP = new javax.swing.JTextField();
        jLabel38 = new javax.swing.JLabel();
        txtSearchNuocSX = new javax.swing.JTextField();
        pnlTableSanPham = new javax.swing.JScrollPane();
        tblSanPham = new javax.swing.JTable();

        frmCTHD.setTitle("Quản lý bán hàng - CTHÐ");
        frmCTHD.setName("popupFRM_CTHD"); // NOI18N

        pnlCTHD.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                pnlCTHDComponentShown(evt);
            }
        });
        pnlCTHD.setLayout(null);

        pnlDetailsCTHD.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Thông tin chi tiết", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 1, 18))); // NOI18N
        pnlDetailsCTHD.setMinimumSize(new java.awt.Dimension(335, 500));
        pnlDetailsCTHD.setLayout(null);

        jLabel45.setText("Số HÐ");
        pnlDetailsCTHD.add(jLabel45);
        jLabel45.setBounds(20, 50, 60, 25);

        txtSoHD_CTHD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSoHD_CTHDActionPerformed(evt);
            }
        });
        pnlDetailsCTHD.add(txtSoHD_CTHD);
        txtSoHD_CTHD.setBounds(130, 50, 190, 25);

        jLabel46.setText("Mã SP");
        pnlDetailsCTHD.add(jLabel46);
        jLabel46.setBounds(20, 95, 60, 25);

        txtMaSP_CTHD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtMaSP_CTHDActionPerformed(evt);
            }
        });
        pnlDetailsCTHD.add(txtMaSP_CTHD);
        txtMaSP_CTHD.setBounds(130, 95, 190, 25);

        jLabel47.setText("Số lượng");
        pnlDetailsCTHD.add(jLabel47);
        jLabel47.setBounds(20, 135, 70, 25);
        pnlDetailsCTHD.add(txtSL);
        txtSL.setBounds(130, 135, 190, 25);

        pnlBtnsHoaDon1.setLayout(new java.awt.GridLayout(2, 0, 20, 10));

        btnLoadCTHD.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/load.png"))); // NOI18N
        btnLoadCTHD.setText("Load");
        btnLoadCTHD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLoadCTHDActionPerformed(evt);
            }
        });
        pnlBtnsHoaDon1.add(btnLoadCTHD);

        btnThemCTHD.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/add.png"))); // NOI18N
        btnThemCTHD.setText("Thêm");
        btnThemCTHD.setEnabled(false);
        btnThemCTHD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnThemCTHDActionPerformed(evt);
            }
        });
        pnlBtnsHoaDon1.add(btnThemCTHD);

        btnSuaCTHD.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/edit.png"))); // NOI18N
        btnSuaCTHD.setText("Sửa");
        btnSuaCTHD.setEnabled(false);
        btnSuaCTHD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSuaCTHDActionPerformed(evt);
            }
        });
        pnlBtnsHoaDon1.add(btnSuaCTHD);

        btnXoaCTHD.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/delete_1.png"))); // NOI18N
        btnXoaCTHD.setText("Xóa");
        btnXoaCTHD.setEnabled(false);
        btnXoaCTHD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnXoaCTHDActionPerformed(evt);
            }
        });
        pnlBtnsHoaDon1.add(btnXoaCTHD);

        pnlDetailsCTHD.add(pnlBtnsHoaDon1);
        pnlBtnsHoaDon1.setBounds(20, 180, 300, 100);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel1.setText("Note: ");
        pnlDetailsCTHD.add(jLabel1);
        jLabel1.setBounds(20, 300, 34, 16);

        jLabel14.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel14.setText("Để trống Số HĐ và nhấn Load để tải toàn bộ Dữ liệu CTHD");
        pnlDetailsCTHD.add(jLabel14);
        jLabel14.setBounds(20, 320, 320, 30);

        pnlCTHD.add(pnlDetailsCTHD);
        pnlDetailsCTHD.setBounds(1020, 0, 350, 540);

        pnlSearchCTHD.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Tìm kiếm CTHD", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 1, 14))); // NOI18N
        pnlSearchCTHD.setPreferredSize(new java.awt.Dimension(968, 140));
        pnlSearchCTHD.setRequestFocusEnabled(false);
        pnlSearchCTHD.setLayout(null);

        btnTimCTHD.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnTimCTHD.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/search.png"))); // NOI18N
        btnTimCTHD.setText("Tìm Kiếm");
        btnTimCTHD.setPreferredSize(new java.awt.Dimension(95, 30));
        btnTimCTHD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTimCTHDActionPerformed(evt);
            }
        });
        pnlSearchCTHD.add(btnTimCTHD);
        btnTimCTHD.setBounds(450, 100, 150, 50);

        pnlSearchCTHDInput.setLayout(new java.awt.GridLayout(1, 0, 5, 0));

        jLabel50.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel50.setText("Số hóa đơn");
        pnlSearchCTHDInput.add(jLabel50);

        txtSearchSoHD_CTHD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSearchSoHD_CTHDActionPerformed(evt);
            }
        });
        pnlSearchCTHDInput.add(txtSearchSoHD_CTHD);

        jLabel51.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel51.setText("Mã sản phẩm");
        pnlSearchCTHDInput.add(jLabel51);
        pnlSearchCTHDInput.add(txtSearchMaSP_CTHD);

        jLabel52.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel52.setText("Số lượng sản phẩm");
        pnlSearchCTHDInput.add(jLabel52);
        pnlSearchCTHDInput.add(txtSearchSL);

        pnlSearchCTHD.add(pnlSearchCTHDInput);
        pnlSearchCTHDInput.setBounds(5, 50, 900, 30);

        pnlCTHD.add(pnlSearchCTHD);
        pnlSearchCTHD.setBounds(10, 50, 1000, 180);

        pnlTableCTHD.setBorder(javax.swing.BorderFactory.createTitledBorder("Bảng CTHD"));

        tblCTHD.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "STT", "Số hóa đơn", "Mã sản phẩm", "Tên sản phẩm", "Số lượng", "Thành tiền"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, true, false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblCTHD.setToolTipText("");
        tblCTHD.setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        tblCTHD.setShowGrid(true);
        tblCTHD.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblCTHDMouseClicked(evt);
            }
        });
        pnlTableCTHD.setViewportView(tblCTHD);

        pnlCTHD.add(pnlTableCTHD);
        pnlTableCTHD.setBounds(0, 240, 1000, 300);

        btnBack.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnBack.setText("Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });
        pnlCTHD.add(btnBack);
        btnBack.setBounds(20, 10, 75, 22);

        javax.swing.GroupLayout frmCTHDLayout = new javax.swing.GroupLayout(frmCTHD.getContentPane());
        frmCTHD.getContentPane().setLayout(frmCTHDLayout);
        frmCTHDLayout.setHorizontalGroup(
            frmCTHDLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1400, Short.MAX_VALUE)
            .addGroup(frmCTHDLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(pnlCTHD, javax.swing.GroupLayout.DEFAULT_SIZE, 1400, Short.MAX_VALUE))
        );
        frmCTHDLayout.setVerticalGroup(
            frmCTHDLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 600, Short.MAX_VALUE)
            .addGroup(frmCTHDLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(frmCTHDLayout.createSequentialGroup()
                    .addComponent(pnlCTHD, javax.swing.GroupLayout.PREFERRED_SIZE, 570, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 30, Short.MAX_VALUE)))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Quản lý bán hàng - Nhóm 4 - CN Java");
        setBounds(new java.awt.Rectangle(0, 0, 0, 0));
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setSize(new java.awt.Dimension(1920, 1080));

        tabPanel.setToolTipText("");
        tabPanel.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        tabPanel.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N

        pnlHoaDon.setLayout(null);

        pnlDetailsHoaDon.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Thông tin chi tiết", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 1, 18))); // NOI18N
        pnlDetailsHoaDon.setMinimumSize(new java.awt.Dimension(335, 500));
        pnlDetailsHoaDon.setLayout(null);

        jLabel34.setText("Số HÐ");
        pnlDetailsHoaDon.add(jLabel34);
        jLabel34.setBounds(20, 50, 80, 25);

        txtSoHD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSoHDActionPerformed(evt);
            }
        });
        pnlDetailsHoaDon.add(txtSoHD);
        txtSoHD.setBounds(130, 50, 190, 25);

        jLabel35.setText("Ngày HÐ");
        pnlDetailsHoaDon.add(jLabel35);
        jLabel35.setBounds(20, 95, 90, 25);

        jLabel39.setText("Mã KH");
        pnlDetailsHoaDon.add(jLabel39);
        jLabel39.setBounds(20, 135, 90, 25);
        pnlDetailsHoaDon.add(txtMaKH_HD);
        txtMaKH_HD.setBounds(130, 135, 190, 25);

        jLabel40.setText("Trị giá");
        pnlDetailsHoaDon.add(jLabel40);
        jLabel40.setBounds(20, 180, 90, 25);
        pnlDetailsHoaDon.add(txtTriGia);
        txtTriGia.setBounds(130, 180, 190, 25);

        jLabel41.setText("Mã nhân viên");
        pnlDetailsHoaDon.add(jLabel41);
        jLabel41.setBounds(20, 220, 90, 25);
        pnlDetailsHoaDon.add(txtMaNV_HD);
        txtMaNV_HD.setBounds(130, 220, 190, 25);

        pnlBtnsHoaDon.setLayout(new java.awt.GridLayout(2, 0, 20, 10));

        btnLoadHD.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/load.png"))); // NOI18N
        btnLoadHD.setText("Load");
        btnLoadHD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLoadHDActionPerformed(evt);
            }
        });
        pnlBtnsHoaDon.add(btnLoadHD);

        btnThemHD.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/add.png"))); // NOI18N
        btnThemHD.setText("Thêm");
        btnThemHD.setDisabledSelectedIcon(null);
        btnThemHD.setEnabled(false);
        btnThemHD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnThemHDActionPerformed(evt);
            }
        });
        pnlBtnsHoaDon.add(btnThemHD);

        btnSuaHD.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/edit.png"))); // NOI18N
        btnSuaHD.setText("Sửa");
        btnSuaHD.setEnabled(false);
        btnSuaHD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSuaHDActionPerformed(evt);
            }
        });
        pnlBtnsHoaDon.add(btnSuaHD);

        btnXoaHD.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/delete_1.png"))); // NOI18N
        btnXoaHD.setText("Xóa");
        btnXoaHD.setEnabled(false);
        btnXoaHD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnXoaHDActionPerformed(evt);
            }
        });
        pnlBtnsHoaDon.add(btnXoaHD);

        pnlDetailsHoaDon.add(pnlBtnsHoaDon);
        pnlBtnsHoaDon.setBounds(26, 260, 300, 100);

        jLabel17.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel17.setText("Note:");
        pnlDetailsHoaDon.add(jLabel17);
        jLabel17.setBounds(20, 420, 37, 20);

        jLabel18.setText("Double click vào dòng HĐ để truy xuất CTHD");
        pnlDetailsHoaDon.add(jLabel18);
        jLabel18.setBounds(20, 450, 310, 16);

        dpNgayHD.setFormats("yyyy-MM-dd");
        pnlDetailsHoaDon.add(dpNgayHD);
        dpNgayHD.setBounds(130, 90, 168, 24);

        pnlHoaDon.add(pnlDetailsHoaDon);
        pnlDetailsHoaDon.setBounds(1020, 0, 350, 500);

        pnlSearchHoaDon.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Tìm kiếm Sản phẩm", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 1, 14))); // NOI18N
        pnlSearchHoaDon.setPreferredSize(new java.awt.Dimension(968, 140));
        pnlSearchHoaDon.setRequestFocusEnabled(false);
        pnlSearchHoaDon.setLayout(null);

        btnTimHD.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnTimHD.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/search.png"))); // NOI18N
        btnTimHD.setText("Tìm Kiếm");
        btnTimHD.setPreferredSize(new java.awt.Dimension(95, 30));
        btnTimHD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTimHDActionPerformed(evt);
            }
        });
        pnlSearchHoaDon.add(btnTimHD);
        btnTimHD.setBounds(450, 100, 150, 50);

        pnlSearchHoaDonInput.setLayout(new java.awt.GridLayout(1, 0, 5, 0));

        jLabel42.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel42.setText("Số hóa đơn");
        pnlSearchHoaDonInput.add(jLabel42);

        txtSearchSoHD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSearchSoHDActionPerformed(evt);
            }
        });
        pnlSearchHoaDonInput.add(txtSearchSoHD);

        jLabel43.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel43.setText("Mã khách hàng");
        pnlSearchHoaDonInput.add(jLabel43);
        pnlSearchHoaDonInput.add(txtSearchMaKH_HD);

        jLabel44.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel44.setText("Mã nhân viên");
        pnlSearchHoaDonInput.add(jLabel44);
        pnlSearchHoaDonInput.add(txtSearchMaNV_HD);

        pnlSearchHoaDon.add(pnlSearchHoaDonInput);
        pnlSearchHoaDonInput.setBounds(5, 50, 900, 30);

        pnlHoaDon.add(pnlSearchHoaDon);
        pnlSearchHoaDon.setBounds(10, 0, 1000, 180);

        pnlTableHoaDon.setBorder(javax.swing.BorderFactory.createTitledBorder("Bảng sản phẩm"));

        tblHoaDon.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "STT", "Số hóa đơn", "Ngày xuất hóa đơn", "Mã khách hàng", "Mã Nhân viên", "Trị giá sổ sách", "Trị giá thực tế", "Chênh lệch"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblHoaDon.setToolTipText("");
        tblHoaDon.setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        tblHoaDon.setShowGrid(true);
        tblHoaDon.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblHoaDonMouseClicked(evt);
            }
        });
        pnlTableHoaDon.setViewportView(tblHoaDon);

        pnlHoaDon.add(pnlTableHoaDon);
        pnlTableHoaDon.setBounds(10, 200, 1000, 300);

        tabPanel.addTab("Hóa Đơn", new javax.swing.ImageIcon(getClass().getResource("/images/hoadon.png")), pnlHoaDon); // NOI18N

        pnlSanPham.setLayout(null);

        pnlDetailsSanPham.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Thông tin chi tiết", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 1, 18))); // NOI18N
        pnlDetailsSanPham.setMinimumSize(new java.awt.Dimension(335, 500));
        pnlDetailsSanPham.setLayout(null);

        jLabel29.setText("Mã sản phẩm");
        pnlDetailsSanPham.add(jLabel29);
        jLabel29.setBounds(20, 50, 90, 25);

        txtMaSP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtMaSPActionPerformed(evt);
            }
        });
        pnlDetailsSanPham.add(txtMaSP);
        txtMaSP.setBounds(130, 50, 190, 25);

        jLabel30.setText("Tên sản phẩm");
        pnlDetailsSanPham.add(jLabel30);
        jLabel30.setBounds(20, 95, 90, 25);

        txtTenSP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtTenSPActionPerformed(evt);
            }
        });
        pnlDetailsSanPham.add(txtTenSP);
        txtTenSP.setBounds(130, 95, 190, 25);

        jLabel31.setText("Đơn vị tính");
        pnlDetailsSanPham.add(jLabel31);
        jLabel31.setBounds(20, 135, 60, 25);
        pnlDetailsSanPham.add(txtDonViTinh);
        txtDonViTinh.setBounds(130, 135, 190, 25);

        jLabel32.setText("Nước SX");
        pnlDetailsSanPham.add(jLabel32);
        jLabel32.setBounds(20, 180, 60, 25);
        pnlDetailsSanPham.add(txtNuocSX);
        txtNuocSX.setBounds(130, 180, 190, 25);

        jLabel33.setText("Giá");
        pnlDetailsSanPham.add(jLabel33);
        jLabel33.setBounds(20, 220, 77, 25);
        pnlDetailsSanPham.add(txtGiaSP);
        txtGiaSP.setBounds(130, 220, 190, 25);

        pnlBtnsSanPham.setLayout(new java.awt.GridLayout(2, 0, 20, 10));

        btnLoadSP.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/load.png"))); // NOI18N
        btnLoadSP.setText("Load");
        btnLoadSP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLoadSPActionPerformed(evt);
            }
        });
        pnlBtnsSanPham.add(btnLoadSP);

        btnThemSP.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/add.png"))); // NOI18N
        btnThemSP.setText("Thêm");
        btnThemSP.setEnabled(false);
        btnThemSP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnThemSPActionPerformed(evt);
            }
        });
        pnlBtnsSanPham.add(btnThemSP);

        btnSuaSP.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/edit.png"))); // NOI18N
        btnSuaSP.setText("Sửa");
        btnSuaSP.setEnabled(false);
        btnSuaSP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSuaSPActionPerformed(evt);
            }
        });
        pnlBtnsSanPham.add(btnSuaSP);

        btnXoaSP.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/delete_1.png"))); // NOI18N
        btnXoaSP.setText("Xóa");
        btnXoaSP.setEnabled(false);
        btnXoaSP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnXoaSPActionPerformed(evt);
            }
        });
        pnlBtnsSanPham.add(btnXoaSP);

        pnlDetailsSanPham.add(pnlBtnsSanPham);
        pnlBtnsSanPham.setBounds(26, 260, 300, 100);

        pnlSanPham.add(pnlDetailsSanPham);
        pnlDetailsSanPham.setBounds(1020, 0, 350, 500);

        pnlSearchSanPham.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Tìm kiếm Sản phẩm", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 1, 14))); // NOI18N
        pnlSearchSanPham.setPreferredSize(new java.awt.Dimension(968, 140));
        pnlSearchSanPham.setRequestFocusEnabled(false);
        pnlSearchSanPham.setLayout(null);

        btnTimSP.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnTimSP.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/search.png"))); // NOI18N
        btnTimSP.setText("Tìm Kiếm");
        btnTimSP.setPreferredSize(new java.awt.Dimension(95, 30));
        btnTimSP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTimSPActionPerformed(evt);
            }
        });
        pnlSearchSanPham.add(btnTimSP);
        btnTimSP.setBounds(450, 100, 150, 50);

        pnlSearchSanPhamInput.setLayout(new java.awt.GridLayout(1, 0, 5, 0));

        jLabel36.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel36.setText("Tên sản phẩm");
        pnlSearchSanPhamInput.add(jLabel36);

        txtSearchTenSP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSearchTenSPActionPerformed(evt);
            }
        });
        pnlSearchSanPhamInput.add(txtSearchTenSP);

        jLabel37.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel37.setText("Mã sản phẩm");
        pnlSearchSanPhamInput.add(jLabel37);
        pnlSearchSanPhamInput.add(txtSearchMaSP);

        jLabel38.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel38.setText("Nước SX");
        pnlSearchSanPhamInput.add(jLabel38);
        pnlSearchSanPhamInput.add(txtSearchNuocSX);

        pnlSearchSanPham.add(pnlSearchSanPhamInput);
        pnlSearchSanPhamInput.setBounds(5, 50, 900, 30);

        pnlSanPham.add(pnlSearchSanPham);
        pnlSearchSanPham.setBounds(10, 0, 1000, 180);

        pnlTableSanPham.setBorder(javax.swing.BorderFactory.createTitledBorder("Bảng sản phẩm"));

        tblSanPham.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "STT", "Mã SP", "Tên SP", "Đơn vị tính", "Nước sản xuất", "Giá"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblSanPham.setToolTipText("");
        tblSanPham.setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        tblSanPham.setShowGrid(true);
        tblSanPham.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblSanPhamMouseClicked(evt);
            }
        });
        pnlTableSanPham.setViewportView(tblSanPham);

        pnlSanPham.add(pnlTableSanPham);
        pnlTableSanPham.setBounds(10, 200, 1000, 300);

        tabPanel.addTab("Sản phẩm", new javax.swing.ImageIcon(getClass().getResource("/images/sanpham.png")), pnlSanPham); // NOI18N

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1394, Short.MAX_VALUE)
            .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(mainPanelLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(tabPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 1370, Short.MAX_VALUE)
                    .addContainerGap()))
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 595, Short.MAX_VALUE)
            .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(mainPanelLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(tabPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 569, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(mainPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
//  Các hàm kiểm tra định dạng
    private boolean kiemTraDinhDang(String date){
        // yyyy-mm-dd
        
        if(date.isEmpty())
            return false;
        
        // Kiem tra dinh dang dau '-'
        if(date.charAt(4) != '-' || date.charAt(7) != '-')
            return false;
        
        // Kiem tra 4 ky tu dau co phai la so ko ?
        if(this.kiemTraSo(date.substring(0, 4)) == false)
            return false;
        
        // Kiem tra ky tu 5, 6, 8, 9 co phai la so ko ?
        if(this.kiemTraSo(date.substring(5, 7)) == false)
            return false;
        
        if(this.kiemTraSo(date.substring(8, 10)) == false)
            return false;
        
        return true;
    }
    
    private boolean kiemTraSo(String x){
        try{
            Integer.valueOf(x);
            return true;
        }
        catch(NumberFormatException ex){
            return false;
        }
    }
    
    private boolean kiemTraNamNhuan(int year){
        if(year % 400 == 0 || year % 4 == 0 && year % 100 != 0)
            return true;
        
        return false;
    }
    
    private boolean kiemTraNgayHopLe(int day, int month, int year){
        if(1920 <= year && year <= 2122){
            if(month >= 1 && month <= 12){
                switch (month) {
                    case 1, 3, 5, 7, 8, 10, 12 -> {
                        if(day >= 1 && day <= 31)
                            return true;
                    }
                    case 4, 6, 9, 11 -> {
                        if(day >= 1 && day <= 30)
                            return true;
                    }
                    case 2 -> {
                        if(kiemTraNamNhuan(year)){
                            if(day >= 1 && day <= 29)
                                return true;
                        }
                        else{
                            if(day >= 1 && day <= 28)
                                return true;
                        }  
                    }
                    default -> {
                    }
                } 
            }     
        }
        
        return false;
    }
    
    private boolean kiemTraNhapNgay(String date){
        int day, month, year;
        
        if(this.kiemTraDinhDang(date) == false)
            return false;
        
        day = Integer.valueOf(date.substring(8, 10));
        month = Integer.valueOf(date.substring(5, 7));
        year = Integer.valueOf(date.substring(0, 4));
        
        if(this.kiemTraNgayHopLe(day, month, year) == false)
            return false;

        return true;
    }
    
    
    

    
    
//    Methods Phần Hóa đơn
//    Gồm các hàm thêm, xóa, sửa, tìm kiếm, load toàn bộ
    private void loadHDData() {
        con.connectToDB(); // kết nối database
        
        //jComboBox1.setModel(LayDuLieucbb("KHACHHANG", "HOTEN", "MAKH"));
        
        // Kiểm tra kết nối thành công hay ko
        try {
            if (con.getCon() != null) {
                String cauTruyVanSQL = """
                                        select 
                                            HD.SOHD,
                                            HD.NGHD,
                                            HD.MAKH,
                                            HD.MANV,
                                            HD.TRIGIA, 
                                            Sum(CT.SL*SP.GIA) ThanhTien,
                                            case
                                                    when HD.TRIGIA is null then 0-Sum(CT.SL*SP.GIA)
                                                    else (HD.TRIGIA - Sum(CT.SL*SP.GIA))
                                            end as ChenhLech
                                        from 
                                            HOADON HD left join CTHD CT on HD.SOHD = CT.SOHD left join SANPHAM SP on CT.MASP = SP.MASP

                                        group by HD.SOHD,
                                            HD.NGHD,
                                            HD.MAKH,
                                            HD.MANV,
                                            HD.TRIGIA
                                        having HD.SOHD is not NULL
                                       """;
                ResultSet rs = con.excuteQueryGetTable(cauTruyVanSQL);
                DefaultTableModel tableModel = (DefaultTableModel) tblHoaDon.getModel();
                tableModel.setRowCount(0);
                int stt = 0;
                

                
                while (rs.next()) {
                    Object[] item = new Object[8];
                    stt++;
                    item[0] = stt;
                    item[1] = rs.getString("SOHD");
                    item[2] = rs.getString("NGHD").substring(0, 10);
                    if (rs.getString("MAKH")==null) {
                        item[3] ="";
                    } else {
                        item[3] = rs.getString("MAKH");
                    }
                    
                    if (rs.getString("MANV")==null) {
                        item[4] ="";
                    } else {
                        item[4] = rs.getString("MANV");
                    }
                    if (rs.getString("TRIGIA")==null) {
                        item[5] ="0";
                    } else {
                        item[5] = rs.getString("TRIGIA");
                    }
                    item[6] = rs.getString("ThanhTien");
                    item[7] = rs.getString("ChenhLech");

                    tableModel.addRow(item);
                }
            } else {
                System.out.println("Loi ket noi !");
            }
        } catch (SQLException ex) {
        }

        con.closeConnect(); // Đóng kết nối
    }

    private boolean kiemTraNhapHoaDon() {
        String newSoHD, newNgayHD, newTriGia, thongBao;
        boolean kiemtra = false;
        thongBao = "";
        newSoHD = txtSoHD.getText();
        newNgayHD = dateFormat.format(dpNgayHD.getDate());
        newNgayHD= dpNgayHD.getDate().toString();
        newTriGia = txtTriGia.getText();


        if (newSoHD.equals("")) {
            txtSoHD.setForeground(Color.red);
            thongBao += "Bạn chưa nhập số hóa đơn\n";
            kiemtra = false;
        }
//        if (newNgayHD.equals("")) {
//            txtNgayHD.setForeground(Color.red);
//            thongBao += "Bạn chưa nhập ngày xuất hóa đơn\n";
//            kiemtra = false;
//        }
        
        if (newTriGia.equals("0")==false&&newTriGia.equals("")==false) {
            txtTriGia.setForeground(Color.red);
            thongBao += "Hóa đơn mới khởi tạo, vui lòng để trống giá trị\n";
            kiemtra = false;
        }

        if (thongBao.equals("")) {
            kiemtra = true;
            txtSoHD.setForeground(Color.black);
            dpNgayHD.setForeground(Color.black);
            txtTriGia.setForeground(Color.black);


        } else {
            kiemtra = false;
            JOptionPane.showMessageDialog(null, thongBao);
        }
        return kiemtra;
    }

    private void themHD() {
        String newSoHD, newNgayHD, newMaKH, newTriGia, newMaNV;
        
        newSoHD = "'"+txtSoHD.getText()+"',";
        newNgayHD = "'"+ dateFormat.format(dpNgayHD.getDate()) +"'," ;

        if (txtMaKH_HD.getText().isBlank()) {
            newMaKH ="NULL,";
        } else {
            newMaKH = "'"+txtMaKH_HD.getText()+"',";
        }
        
        if (txtTriGia.getText().isBlank()) {
            newTriGia ="0,";
        } else {
            newTriGia = "'"+txtTriGia.getText()+"',";
        }
        
        if (txtMaNV_HD.getText().isBlank()) {
            newMaNV ="NULL";
        } else {
            newMaNV = "'"+txtMaNV_HD.getText()+"'";
        }


        String cauTruyVan = "INSERT INTO HOADON (SOHD,NGHD,MAKH,TRIGIA,MANV) VALUES (" + newSoHD  + newNgayHD + newMaKH + newTriGia + newMaNV+")";
        System.out.println(cauTruyVan);

        if (kiemTraNhapHoaDon()) {
            con.connectToDB();
            con.excuteQueryUpdateDB(cauTruyVan);

            if (con.getError() != null) {
                JOptionPane.showMessageDialog(null, con.getError() + "\nThêm dữ liệu không thành công");
            } else {
                JOptionPane.showMessageDialog(null, "Thêm dữ liệu thành công");
            }
        }
        loadHDData();
        con.closeConnect();
    }

    private void suaHD() {
//        xoaTextLableThongBao();
        // Lấy chỉ số dòng lưu vào mảng
        String suaNgayHD = dateFormat.format(dpNgayHD.getDate());
        String suaMaKH = txtMaKH_HD.getText();
        String suaTriGia = txtTriGia.getText();
        String suaMaNV = txtMaNV_HD.getText();

        int[] clickedRows = tblHoaDon.getSelectedRows();

        if (clickedRows.length < 1) {

            JOptionPane.showMessageDialog(null, "Bạn chưa chọn hóa đơn.");
        }

        if (clickedRows.length == 1) {
            int dialogButton = JOptionPane.YES_NO_OPTION;
            int dialogResult = JOptionPane.showConfirmDialog(null, "Bạn muốn sửa thông tin hóa đơn?", "Warning", dialogButton);

            if (dialogResult == JOptionPane.YES_OPTION) {
                if(this.kiemTraNhapNgay(this.dateFormat.format(dpNgayHD.getDate())) == false){
                    JOptionPane.showMessageDialog(null, con.getError() + "\nĐịnh dạng ngày không hợp lệ !\nVui lòng nhập theo định dạng yyyy-mm-dd");
                    return;
                }
                // Lấy số hóa đơn cần sửa
                String SoHD = tblHoaDon.getValueAt(clickedRows[0], 1).toString();
                String cauTruyVan = "update HOADON set "
                        + "NGHD = '" + suaNgayHD + "'"
                        + ", MaKH = '" + suaMaKH + "'"
                        + ", TRIGIA = '" + suaTriGia + "'"
                        + ", MANV = '" + suaMaNV + "'"
                        + " where SOHD = '" + SoHD + "'";
                con.connectToDB();
                con.excuteQueryUpdateDB(cauTruyVan);
                System.out.println(cauTruyVan);
                if (con.getError() != null) {
                    JOptionPane.showMessageDialog(null, con.getError() + "\nSửa dữ liệu không thành công");
                } else {
                    JOptionPane.showMessageDialog(null, "Sửa dữ liệu thành công");
                }
                loadHDData();
                con.closeConnect();
            } else {
                JOptionPane.showMessageDialog(null, "Hủy lệnh.");
                con.closeConnect();
            }

        } else if (clickedRows.length > 1) {
            JOptionPane.showMessageDialog(null, "Chỉ chọn 1 Sản phẩm");
            con.closeConnect();
        }
    }

    private void xoaHD() {
//        xoaTextLableThongBao();
        int[] clickedRows = tblHoaDon.getSelectedRows();

        if (clickedRows.length > 0) {
            int dialogButton = JOptionPane.YES_NO_OPTION;
            int dialogResult = JOptionPane.showConfirmDialog(null, "Bạn muốn xóa " + clickedRows.length + " hóa đơn?", "Warning", dialogButton);

            if (dialogResult == JOptionPane.YES_OPTION) {
                for (int i = 0; i < clickedRows.length; i++) {
                    String delSoHD = tblHoaDon.getValueAt(clickedRows[i], 1).toString();
                    String cauTruyVan = "delete HOADON where SOHD= '" + delSoHD + "'";
                    con.connectToDB();
                    con.excuteQueryUpdateDB(cauTruyVan);
                    System.out.println("test con error: " + con.getError());
                    if (con.getError() != null) {
                        JOptionPane.showMessageDialog(null, con.getError() + "\nXóa dữ liệu không thành công");
                        break;
                    }
                    if (i == clickedRows.length - 1 && con.getError() == null) {
                        JOptionPane.showMessageDialog(null, "Xóa dữ liêu thành công.");
                    }
                }

                loadHDData();
                con.closeConnect();
            } else {
                JOptionPane.showMessageDialog(null, "Hủy lệnh.");
                con.closeConnect();
            }

        } else {
            JOptionPane.showMessageDialog(null, "Bạn chưa chọn Sản phẩm");
            con.closeConnect();
        }
    }

    private void timHD() {
//        xoaTextLableThongBao();
        String searchSoHD = txtSearchSoHD.getText();
        String searchMaKH = txtSearchMaKH_HD.getText();
        String searchMaNV = txtSearchMaNV_HD.getText();
        if (searchSoHD.isEmpty() && searchMaKH.isEmpty() && searchMaNV.isEmpty()) {
//            lblThongBaoTimKiem.setForeground(Color.red);
//            lblThongBaoTimKiem.setText("Bạn chưa nhập dữ liệu tìm kiếm !");
            JOptionPane.showMessageDialog(null, "Chưa nhập dữ liệu tìm kiếm");
        } else {
            String cauTruyVan = "Select * from HOADON WHERE 1=1 ";
            if (!searchSoHD.isEmpty()) {
                cauTruyVan = cauTruyVan + "and SOHD = '" + searchSoHD + "' ";
            }
            if (!searchMaKH.isEmpty()) {
                cauTruyVan = cauTruyVan + " and MaKH = '" + searchMaKH + "' ";
            }
            if (!searchMaNV.isEmpty()) {
                cauTruyVan = cauTruyVan + " and MaNV = '" + searchMaNV + "' ";
            }

            System.out.println(cauTruyVan);

            try {
                con.connectToDB();
                ResultSet rs = con.excuteQueryGetTable(cauTruyVan);
                DefaultTableModel tableModel = (DefaultTableModel) tblHoaDon.getModel();
                tableModel.setRowCount(0);
                int stt = 0;
                while (rs.next()) {
                    Object[] item = new Object[6];
                    stt++;
                    item[0] = stt;
                    item[1] = rs.getString("SOHD");
                    item[2] = rs.getString("NGHD").substring(0, 10);
                    item[3] = rs.getString("MAKH");
                    item[4] = rs.getString("TRIGIA");
                    item[5] = rs.getString("MANV");
                    tableModel.addRow(item);
                }

                con.closeConnect();
            } catch (SQLException ex) {
            }
        }
    }

    private void selectHD() {
        if (tblHoaDon.getSelectedRowCount() == 1) {
            int clickedRow = tblHoaDon.getSelectedRow();
            txtSoHD.setText(tblHoaDon.getValueAt(clickedRow, 1).toString());
            dpNgayHD.setDate(Date.valueOf(tblHoaDon.getValueAt(clickedRow, 2).toString()));
            txtMaKH_HD.setText(tblHoaDon.getValueAt(clickedRow, 3).toString());
            txtMaNV_HD.setText(tblHoaDon.getValueAt(clickedRow, 4).toString());
            txtTriGia.setText(tblHoaDon.getValueAt(clickedRow, 5).toString());

        } else {
            txtSoHD.setText("");
            dpNgayHD.setDate(null);
            txtMaKH_HD.setText("");
            txtTriGia.setText("");
            txtMaNV_HD.setText("");
        }
    }
    
    private String getSelectedSoHD(int clickedRow) {
        String soHD = tblHoaDon.getValueAt(clickedRow, 1).toString();
        return soHD;
        
    }
    
//    Methods Phần Chi tiết hóa đơn
//    Gồm các hàm thêm, xóa, sửa, tìm kiếm, load toàn bộ
    private void loadCTHDData() {
        con.connectToDB(); // kết nối database
        if (txtSoHD_CTHD.getText().isBlank()) {
            // Kiểm tra kết nối thành công hay ko
            try {
                if (con.getCon() != null) {
                    String cauTruyVanSQL = """
                                           select CT.SOHD, CT.MASP, SP.TENSP , CT.SL, (CT.SL*SP.GIA) ThanhTien
                                           from CTHD CT join SANPHAM SP on CT.MASP = SP.MASP
                                           """;
                    ResultSet rs = con.excuteQueryGetTable(cauTruyVanSQL);
                    DefaultTableModel tableModel = (DefaultTableModel) tblCTHD.getModel();
                    tableModel.setRowCount(0);
                    int stt = 0;

                    while (rs.next()) {
                        Object[] item = new Object[6];
                        stt++;
                        item[0] = stt;
                        item[1] = rs.getString("SOHD");
                        item[2] = rs.getString("MASP");
                        item[3] = rs.getString("TENSP");
                        item[4] = rs.getString("SL");
                        item[5] = rs.getString("ThanhTien");
                        tableModel.addRow(item);
                    }
                } else {
                    System.out.println("Loi ket noi !");
                }
            } catch (SQLException ex) {
            }

            con.closeConnect(); // Đóng kết nối
        }
        else{
            loadCTHDSelectedHD(txtSoHD_CTHD.getText());
        }
        
    }

    private void loadCTHDSelectedHD(String soHD){
        String cauTruyVan = """
                                select CT.SOHD, CT.MASP, SP.TENSP, CT.SL, (CT.SL*SP.GIA) ThanhTien
                                from CTHD CT join SANPHAM SP on CT.MASP = SP.MASP
                            """
                            + "where CT.SOHD = '"
                             +soHD + "'"
                            ;
        System.out.println(cauTruyVan);
        try {
//                lblThongBaoTimKiem.setText("");
                con.connectToDB();
                ResultSet rs = con.excuteQueryGetTable(cauTruyVan);
                DefaultTableModel tableModel = (DefaultTableModel) tblCTHD.getModel();
                tableModel.setRowCount(0);
                int stt = 0;
                while (rs.next()) {
//                    if (rs.wasNull()) {
//                        JOptionPane.showMessageDialog(null, "Không tìm thấy dữ liệu!");
//                    }
                    Object[] item = new Object[6];
                    stt++;
                    item[0] = stt;
                    item[1] = rs.getString("SOHD");
                    item[2] = rs.getString("MASP");
                    item[3] = rs.getString("TENSP");
                    item[4] = rs.getString("SL");
                    item[5] = rs.getString("ThanhTien");
                    tableModel.addRow(item);
                }

                con.closeConnect();
            } catch (SQLException ex) {
            }
        
    }
    
    
    private boolean kiemTraNhapCTHD() {
        String newSoHD, newMaSP, newSL, thongBao;
        boolean kiemtra = false;
        thongBao = "";
        newSoHD = txtSoHD_CTHD.getText();
        newMaSP = txtMaSP_CTHD.getText();
        newSL = txtSL.getText();

        if (newSoHD.equals("")) {
            txtSoHD_CTHD.setForeground(Color.red);
            thongBao += "Bạn chưa nhập số hóa đơn\n";
            kiemtra = false;
        }
        if (newMaSP.equals("")) {
            txtMaSP_CTHD.setForeground(Color.red);
            thongBao += "Bạn chưa nhập mã sản phẩm\n";
            kiemtra = false;
        }
        if (newSL.equals("")) {
            txtSL.setForeground(Color.red);
            thongBao += "Bạn chưa nhập số lượng\n";
            kiemtra = false;
        }

        if (thongBao.equals("")) {
            kiemtra = true;
            txtSoHD_CTHD.setForeground(Color.black);
            txtMaSP_CTHD.setForeground(Color.black);
            txtSL.setForeground(Color.black);

        } else {
            kiemtra = false;
            JOptionPane.showMessageDialog(null, thongBao);
        }
        return kiemtra;
    }

    private void themCTHD() {
        String newSoHD, newMaSP, newSL;
        newSoHD = txtSoHD_CTHD.getText();
        newMaSP = txtMaSP_CTHD.getText();
        newSL = txtSL.getText();


        String cauTruyVan = "INSERT INTO CTHD (SOHD,MASP,SL) VALUES ('" + newSoHD + "','" + newMaSP + "','" + newSL + "')";
        System.out.println(cauTruyVan);

        if (kiemTraNhapCTHD()) {
            con.connectToDB();
            con.excuteQueryUpdateDB(cauTruyVan);

            if (con.getError() != null) {
                JOptionPane.showMessageDialog(null, con.getError() + "\nThêm dữ liệu không thành công");
            } else {
                JOptionPane.showMessageDialog(null, "Thêm dữ liệu thành công");
            }
        }
        loadCTHDData();
        con.closeConnect();
    }

    private void suaCTHD() {

        String suaMaSP = txtMaSP_CTHD.getText();
        String suaSL = txtSL.getText();

        int[] clickedRows = tblCTHD.getSelectedRows();

        if (clickedRows.length < 1) {
            JOptionPane.showMessageDialog(null, "Bạn chưa chọn hóa đơn.");
        }

        if (clickedRows.length == 1) {
            int dialogButton = JOptionPane.YES_NO_OPTION;
            int dialogResult = JOptionPane.showConfirmDialog(null, "Bạn muốn sửa thông tin hóa đơn?", "Warning", dialogButton);

            if (dialogResult == JOptionPane.YES_OPTION) {
                // Lấy số hóa đơn cần sửa
                String SoHD = tblCTHD.getValueAt(clickedRows[0], 1).toString();
                String cauTruyVan = "update CTHD set "
                        + "MASP = '" + suaMaSP + "'"
                        + ", SL = '" + suaSL + "'"
                        + " where SOHD = '" + SoHD + "'";
                con.connectToDB();
                con.excuteQueryUpdateDB(cauTruyVan);
                System.out.println(cauTruyVan);
                if (con.getError() != null) {
                    JOptionPane.showMessageDialog(null, con.getError() + "\nSửa dữ liệu không thành công");
                } else {
                    JOptionPane.showMessageDialog(null, "Sửa dữ liệu thành công");
                }
                loadCTHDData();
                con.closeConnect();
            } else {
                JOptionPane.showMessageDialog(null, "Hủy lệnh.");
                con.closeConnect();
            }

        } else if (clickedRows.length > 1) {
            JOptionPane.showMessageDialog(null, "Chỉ chọn 1 Sản phẩm");
            con.closeConnect();
        }
    }

    private void xoaCTHD() {
//        xoaTextLableThongBao();
        int[] clickedRows = tblCTHD.getSelectedRows();

        if (clickedRows.length > 0) {
            int dialogButton = JOptionPane.YES_NO_OPTION;
            int dialogResult = JOptionPane.showConfirmDialog(null, "Bạn muốn xóa " + clickedRows.length + " chi tiết hóa đơn?", "Warning", dialogButton);

            if (dialogResult == JOptionPane.YES_OPTION) {
                for (int i = 0; i < clickedRows.length; i++) {
                    String delSoHD = tblCTHD.getValueAt(clickedRows[i], 1).toString();
                    String delMaSP = tblCTHD.getValueAt(clickedRows[i], 2).toString();
                    String cauTruyVan = "delete CTHD where SOHD= '" + delSoHD + "' and MASP = '"+ delMaSP+"'";
                    System.out.println(cauTruyVan);
                    con.connectToDB();
                    con.excuteQueryUpdateDB(cauTruyVan);
                    System.out.println("test con error: " + con.getError());
                    if (con.getError() != null) {
                        JOptionPane.showMessageDialog(null, con.getError() + "\nXóa dữ liệu không thành công");
                        break;
                    }
                    if (i == clickedRows.length - 1 && con.getError() == null) {
                        JOptionPane.showMessageDialog(null, "Xóa dữ liêu thành công.");
                    }
                }

                loadCTHDData();
                con.closeConnect();
            } else {
                JOptionPane.showMessageDialog(null, "Hủy lệnh.");
                con.closeConnect();
            }

        } else {
            JOptionPane.showMessageDialog(null, "Bạn chưa chọn Sản phẩm");
            con.closeConnect();
        }
    }

    private void timCTHD() {
//        xoaTextLableThongBao();
        String searchSoHD = txtSearchSoHD_CTHD.getText();
        String searchSL = txtSearchSL.getText();
        String searchMaSP = txtSearchMaSP_CTHD.getText();
        if (searchSoHD.isEmpty() && searchSL.isEmpty() && searchMaSP.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Chưa nhập dữ liệu tìm kiếm");
        } else {
            String cauTruyVan = "Select * from CTHD WHERE 1=1 ";
            if (!searchSoHD.isEmpty()) {
                cauTruyVan = cauTruyVan + "and SOHD = '" + searchSoHD + "' ";
            }
            if (!searchSL.isEmpty()) {
                cauTruyVan = cauTruyVan + " and SL = '" + searchSL + "' ";
            }
            if (!searchMaSP.isEmpty()) {
                cauTruyVan = cauTruyVan + " and MaSP = '" + searchMaSP + "' ";
            }

            System.out.println(cauTruyVan);

            try {
                con.connectToDB();
                ResultSet rs = con.excuteQueryGetTable(cauTruyVan);
                DefaultTableModel tableModel = (DefaultTableModel) tblCTHD.getModel();
                tableModel.setRowCount(0);
                int stt = 0;
                while (rs.next()) {
                    Object[] item = new Object[4];
                    stt++;
                    item[0] = stt;
                    item[1] = rs.getString("SOHD");
                    item[2] = rs.getString("MASP");
                    item[3] = rs.getString("SL");
                    tableModel.addRow(item);
                }

                con.closeConnect();
            } catch (SQLException ex) {
            }
        }
    }

    private void selectCTHD() {
        if (tblCTHD.getSelectedRowCount() == 1) {
            int clickedRow = tblCTHD.getSelectedRow();
            txtSoHD_CTHD.setText(tblCTHD.getValueAt(clickedRow, 1).toString());
            txtMaSP_CTHD.setText(tblCTHD.getValueAt(clickedRow, 2).toString());
            txtSL.setText(tblCTHD.getValueAt(clickedRow, 3).toString());
 
        } else {
            txtSoHD_CTHD.setText("");
            txtMaSP_CTHD.setText("");
            txtSL.setText("");
        }
    }
       
    
    
//    Methods Phần Sản phẩm
//    Gồm các hàm thêm, xóa, sửa, tìm kiếm, load toàn bộ
    private void loadSPData(){
        con.connectToDB(); // kết nối database
        
        // Kiểm tra kết nối thành công hay ko
        try{
            if(con.getCon() != null){
                String cauTruyVanSQL = "Select * from SANPHAM";
                ResultSet rs = con.excuteQueryGetTable(cauTruyVanSQL);
                DefaultTableModel tableModel = (DefaultTableModel)tblSanPham.getModel();
                tableModel.setRowCount(0);
                int stt = 0;
                
                while(rs.next()){
                    Object[] item = new Object[6];
                    stt++;
                    item[0] = stt;
                    item[1] = rs.getString("MASP");
                    item[2] = rs.getString("TENSP");
                    item[3] = rs.getString("DVT");
                    item[4] = rs.getString("NUOCSX");
                    item[5] = rs.getString("GIA");
                    tableModel.addRow(item);
                }
            }
            else{
                System.out.println("Loi ket noi !");
            }
        }
        catch(SQLException ex){ 
        }
        
        con.closeConnect(); // Đóng kết nối
    }
    
    private boolean kiemTraNhapSanPham(){
        String newMaSP, newTenSP, newDVT, newNuocSX, newGiaSP, thongBao;
        boolean kiemtra = false;
        thongBao = "";
        newMaSP=txtMaSP.getText();
        newTenSP=txtTenSP.getText();
        newDVT=txtDonViTinh.getText();
        newNuocSX=txtNuocSX.getText();
        newGiaSP=txtGiaSP.getText();
        
                
        
        if(newMaSP.equals("")){
            txtMaSP.setForeground(Color.red);
            thongBao += "Bạn chưa nhập mã sản phẩm\n";
            kiemtra = false;
        }
        if(newTenSP.equals("")){
            txtTenSP.setForeground(Color.red);
            thongBao +="Bạn chưa nhập tên sản phẩm\n";
            kiemtra = false;
        }
        if(newDVT.equals("")){
            txtDonViTinh.setForeground(Color.red);
            thongBao +="Bạn chưa nhập đơn vị tính\n";
            kiemtra = false;
        }
        if(newNuocSX.equals("")){
            txtNuocSX.setForeground(Color.red);
            thongBao +="Bạn chưa nhập nước sản xuất\n";
            kiemtra = false;
        }
        if(newGiaSP.equals("")){
            txtGiaSP.setForeground(Color.red);
            thongBao +="Bạn chưa nhập giá sản phẩm\n";
            kiemtra = false;
        }
        
        if (thongBao.equals("")) {
            kiemtra = true;
            txtMaSP.setForeground(Color.black);
            txtTenSP.setForeground(Color.black);
            txtDonViTinh.setForeground(Color.black);
            txtNuocSX.setForeground(Color.black);
            txtGiaSP.setForeground(Color.black);
            
        } else {
            kiemtra = false;
            JOptionPane.showMessageDialog(null,thongBao);
        }
        return kiemtra;
    }
    
    private void themSP(){
        String newMaSP, newTenSP, newDVT, newNuocSX, newGiaSP;
        newMaSP=txtMaSP.getText();
        newTenSP=txtTenSP.getText();
        newDVT=txtDonViTinh.getText();
        newNuocSX=txtNuocSX.getText();
        newGiaSP=txtGiaSP.getText();
        
        String cauTruyVan = "INSERT INTO SANPHAM (MASP,TENSP,DVT,NUOCSX,GIA) VALUES ('" + newMaSP + "','" + newTenSP + "','" + newDVT + "','" + newNuocSX + "','" + newGiaSP + "')";
        System.out.println(cauTruyVan);
        
        if(kiemTraNhapSanPham()){
            con.connectToDB();
            con.excuteQueryUpdateDB(cauTruyVan);
            
            if (con.getError()!=null) {
                JOptionPane.showMessageDialog(null,con.getError() + "\nThêm dữ liệu không thành công");
            } else {
                JOptionPane.showMessageDialog(null,"Thêm dữ liệu thành công");
            }
        }
        loadSPData();
        con.closeConnect();
    }
    
    private void suaSP(){
//        xoaTextLableThongBao();
        // Lấy chỉ số dòng lưu vào mảng
        String suaTenSP = txtTenSP.getText();
        String suaDVT = txtDonViTinh.getText();
        String suaNuocSX = txtNuocSX.getText();
        String suaGiaSP = txtGiaSP.getText();
                
        int[] clickedRows = tblSanPham.getSelectedRows();
        
        if (clickedRows.length<1) {
            JOptionPane.showMessageDialog(null,"Bạn chưa chọn sản phẩm.");
        }
        
        if (clickedRows.length==1) {
            int dialogButton = JOptionPane.YES_NO_OPTION;
            int dialogResult = JOptionPane.showConfirmDialog(null,"Bạn muốn sửa thông tin sản phẩm?", "Warning",dialogButton);
            
            if (dialogResult == JOptionPane.YES_OPTION) {
                // Lấy mã sản phẩm cần sửa
                String MaSP = tblSanPham.getValueAt(clickedRows[0], 1).toString();
                String cauTruyVan = "update SANPHAM set "
                                        + "TENSP = '"+  suaTenSP +"'"
                                        + ", DVT = '"+ suaDVT +"'"
                                        + ", NUOCSX = '"+ suaNuocSX +"'"
                                        + ", GIA = '" + suaGiaSP + "'"
                                        + " where MASP = '" + MaSP +"'";
                con.connectToDB();
                con.excuteQueryUpdateDB(cauTruyVan);
                System.out.println(cauTruyVan);
                if (con.getError()!=null) {
                    JOptionPane.showMessageDialog(null,con.getError() + "\nSửa dữ liệu không thành công");
                } else {
                    JOptionPane.showMessageDialog(null,"Sửa dữ liệu thành công");
                }              
                loadSPData();
                con.closeConnect();
            }
            else{
                JOptionPane.showMessageDialog(null,"Hủy lệnh.");
                con.closeConnect();
            }

        } else if(clickedRows.length>1) {
            JOptionPane.showMessageDialog(null,"Chỉ chọn 1 Sản phẩm");
            con.closeConnect();
        }
    }
    
    private void xoaSP(){
//        xoaTextLableThongBao();
        int[] clickedRows = tblSanPham.getSelectedRows();
        
        if (clickedRows.length > 0) {
            int dialogButton = JOptionPane.YES_NO_OPTION;
            int dialogResult = JOptionPane.showConfirmDialog(null,"Bạn muốn xóa "+clickedRows.length+ " sản phẩm?", "Warning",dialogButton);
            
            if (dialogResult == JOptionPane.YES_OPTION) {
                for (int i = 0; i < clickedRows.length; i++) {
                    String delMaSP = tblSanPham.getValueAt(clickedRows[i], 1).toString();
                    String cauTruyVan = "delete SANPHAM where MASP= '" + delMaSP +"'";
                    con.connectToDB();
                    con.excuteQueryUpdateDB(cauTruyVan);
                    System.out.println("test con error: "+con.getError());
                    if (con.getError()!=null) {
                        JOptionPane.showMessageDialog(null,con.getError() + "\nXóa dữ liệu không thành công");
                        break;
                    }
                    if (i==clickedRows.length-1 && con.getError()==null) {
                        JOptionPane.showMessageDialog(null,"Xóa dữ liêu thành công.");
                    }
                }
                
                loadSPData();
                con.closeConnect();
            }
            else{
                JOptionPane.showMessageDialog(null,"Hủy lệnh.");
                con.closeConnect();
            }

        } else {
            JOptionPane.showMessageDialog(null,"Bạn chưa chọn Sản phẩm");
            con.closeConnect();
        }
    }
    
    private void timSP(){
        String searchMaSP = txtSearchMaSP.getText();
        String searchTenSP = txtSearchTenSP.getText();
        String searchNuocSX = txtSearchNuocSX.getText();
        
        
        if (searchTenSP.isEmpty() && searchNuocSX.isEmpty() && searchMaSP.isEmpty()) {
            JOptionPane.showMessageDialog(null,"Chưa nhập dữ liệu tìm kiếm");
        } else{
            String cauTruyVan = "Select * from SANPHAM WHERE 1=1 ";
            if (!searchMaSP.isEmpty()) {
                cauTruyVan = cauTruyVan + "and MASP = '"+ searchMaSP +"' ";
            }
            if (!searchNuocSX.isEmpty()) {
                cauTruyVan = cauTruyVan + " and NUOCSX like '%"+ searchNuocSX +"%'";
            }
            if (!searchTenSP.isEmpty()) {
                cauTruyVan = cauTruyVan + " and TENSP like '%"+ searchTenSP +"%'";
            }
            
            System.out.println(cauTruyVan);
            
            try{
                con.connectToDB();
                ResultSet rs = con.excuteQueryGetTable(cauTruyVan);
                DefaultTableModel tableModel = (DefaultTableModel) tblSanPham.getModel();
                tableModel.setRowCount(0);
                int stt = 0;
                
                while (rs.next()) {
                    Object[] item = new Object[5];
                    stt++;
                    item[0] = stt;
                    item[1] = rs.getString("MASP");
                    item[2] = rs.getString("TENSP");
                    item[3] = rs.getString("NUOCSX");
                    item[4] = rs.getString("DVT");
                    item[4] = rs.getString("GIA");
                    tableModel.addRow(item);
                }
                
                con.closeConnect();
            }
            catch (SQLException ex) {
            }
        }
    }
    
    private void selectSP(){
        if (tblSanPham.getSelectedRowCount()==1){
            int clickedRow = tblSanPham.getSelectedRow();
            txtMaSP.setText(tblSanPham.getValueAt(clickedRow, 1).toString());
            txtTenSP.setText(tblSanPham.getValueAt(clickedRow, 2).toString());
            txtDonViTinh.setText(tblSanPham.getValueAt(clickedRow, 3).toString());
            txtNuocSX.setText(tblSanPham.getValueAt(clickedRow, 4).toString());
            txtGiaSP.setText(tblSanPham.getValueAt(clickedRow, 5).toString());
        } else {
            txtMaSP.setText("");
            txtTenSP.setText("");
            txtDonViTinh.setText("");
            txtNuocSX.setText("");
            txtGiaSP.setText("");
        }
    }
    
    
    private void txtMaSPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtMaSPActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtMaSPActionPerformed

    private void txtTenSPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtTenSPActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtTenSPActionPerformed

    private void btnLoadSPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLoadSPActionPerformed
        // TODO add your handling code here:
        loadSPData();
    }//GEN-LAST:event_btnLoadSPActionPerformed

    private void btnThemSPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnThemSPActionPerformed
        // TODO add your handling code here:
        themSP();
    }//GEN-LAST:event_btnThemSPActionPerformed

    private void btnSuaSPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSuaSPActionPerformed
        // TODO add your handling code here:
        suaSP();
    }//GEN-LAST:event_btnSuaSPActionPerformed

    private void btnXoaSPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnXoaSPActionPerformed
        // TODO add your handling code here:
        xoaSP();
    }//GEN-LAST:event_btnXoaSPActionPerformed

    private void btnTimSPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTimSPActionPerformed
        // TODO add your handling code here:
        timSP();
    }//GEN-LAST:event_btnTimSPActionPerformed

    private void txtSearchTenSPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSearchTenSPActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSearchTenSPActionPerformed

    private void tblSanPhamMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblSanPhamMouseClicked
        // TODO add your handling code here:
        selectSP();
    }//GEN-LAST:event_tblSanPhamMouseClicked

    private void txtSoHDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSoHDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSoHDActionPerformed

    private void btnLoadHDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLoadHDActionPerformed
        // TODO add your handling code here:
        loadHDData();
    }//GEN-LAST:event_btnLoadHDActionPerformed

    private void btnThemHDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnThemHDActionPerformed
        // TODO add your handling code here:
        themHD();
    }//GEN-LAST:event_btnThemHDActionPerformed

    private void btnSuaHDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSuaHDActionPerformed
        // TODO add your handling code here:
        suaHD();
    }//GEN-LAST:event_btnSuaHDActionPerformed

    private void btnXoaHDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnXoaHDActionPerformed
        // TODO add your handling code here:
        xoaHD();
    }//GEN-LAST:event_btnXoaHDActionPerformed

    private void btnTimHDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTimHDActionPerformed
        // TODO add your handling code here:
        timHD();
    }//GEN-LAST:event_btnTimHDActionPerformed

    private void txtSearchSoHDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSearchSoHDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSearchSoHDActionPerformed

    private void tblHoaDonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblHoaDonMouseClicked
        // TODO add your handling code here:
        if (evt.getClickCount()==1) {
            selectHD();
        }
        if (evt.getClickCount()==2) {
            frmCTHD.setSize(1400, 550);
            frmCTHD.setLocation(50, 50);
            frmCTHD.show(true);
            String soHD = getSelectedSoHD(tblHoaDon.getSelectedRow());
            loadCTHDSelectedHD(soHD);
            txtSoHD_CTHD.setText(soHD);
        }
        
    }//GEN-LAST:event_tblHoaDonMouseClicked

    private void txtSoHD_CTHDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSoHD_CTHDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSoHD_CTHDActionPerformed

    private void txtMaSP_CTHDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtMaSP_CTHDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtMaSP_CTHDActionPerformed

    private void btnLoadCTHDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLoadCTHDActionPerformed
        // TODO add your handling code here:
        loadCTHDData();
    }//GEN-LAST:event_btnLoadCTHDActionPerformed

    private void btnThemCTHDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnThemCTHDActionPerformed
        // TODO add your handling code here:
        themCTHD();
    }//GEN-LAST:event_btnThemCTHDActionPerformed

    private void btnSuaCTHDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSuaCTHDActionPerformed
        // TODO add your handling code here:
        suaCTHD();
    }//GEN-LAST:event_btnSuaCTHDActionPerformed

    private void btnXoaCTHDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnXoaCTHDActionPerformed
        // TODO add your handling code here:
        xoaCTHD();
    }//GEN-LAST:event_btnXoaCTHDActionPerformed

    private void btnTimCTHDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTimCTHDActionPerformed
        // TODO add your handling code here:
        timCTHD();
    }//GEN-LAST:event_btnTimCTHDActionPerformed

    private void txtSearchSoHD_CTHDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSearchSoHD_CTHDActionPerformed
        // TODO add your handling code here:
        //        timCTHD();
    }//GEN-LAST:event_txtSearchSoHD_CTHDActionPerformed

    private void tblCTHDMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblCTHDMouseClicked
        // TODO add your handling code here:
        selectCTHD();
        
    }//GEN-LAST:event_tblCTHDMouseClicked

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        frmCTHD.show(false);
        loadHDData();
    }//GEN-LAST:event_btnBackActionPerformed

    private void pnlCTHDComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_pnlCTHDComponentShown
        // TODO add your handling code here:

    }//GEN-LAST:event_pnlCTHDComponentShown

    
    /**
     * @param args the command line arguments
     */
    
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(frmGuessForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(frmGuessForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(frmGuessForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(frmGuessForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new frmGuessForm().setVisible(true);
            }
        });
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnLoadCTHD;
    private javax.swing.JButton btnLoadHD;
    private javax.swing.JButton btnLoadSP;
    private javax.swing.JButton btnSuaCTHD;
    private javax.swing.JButton btnSuaHD;
    private javax.swing.JButton btnSuaSP;
    private javax.swing.JButton btnThemCTHD;
    private javax.swing.JButton btnThemHD;
    private javax.swing.JButton btnThemSP;
    private javax.swing.JButton btnTimCTHD;
    private javax.swing.JButton btnTimHD;
    private javax.swing.JButton btnTimSP;
    private javax.swing.JButton btnXoaCTHD;
    private javax.swing.JButton btnXoaHD;
    private javax.swing.JButton btnXoaSP;
    private org.jdesktop.swingx.JXDatePicker dpNgayHD;
    private javax.swing.JFrame frmCTHD;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel37;
    private javax.swing.JLabel jLabel38;
    private javax.swing.JLabel jLabel39;
    private javax.swing.JLabel jLabel40;
    private javax.swing.JLabel jLabel41;
    private javax.swing.JLabel jLabel42;
    private javax.swing.JLabel jLabel43;
    private javax.swing.JLabel jLabel44;
    private javax.swing.JLabel jLabel45;
    private javax.swing.JLabel jLabel46;
    private javax.swing.JLabel jLabel47;
    private javax.swing.JLabel jLabel50;
    private javax.swing.JLabel jLabel51;
    private javax.swing.JLabel jLabel52;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JPanel pnlBtnsHoaDon;
    private javax.swing.JPanel pnlBtnsHoaDon1;
    private javax.swing.JPanel pnlBtnsSanPham;
    private javax.swing.JPanel pnlCTHD;
    private javax.swing.JPanel pnlDetailsCTHD;
    private javax.swing.JPanel pnlDetailsHoaDon;
    private javax.swing.JPanel pnlDetailsSanPham;
    private javax.swing.JPanel pnlHoaDon;
    private javax.swing.JPanel pnlSanPham;
    private javax.swing.JPanel pnlSearchCTHD;
    private javax.swing.JPanel pnlSearchCTHDInput;
    private javax.swing.JPanel pnlSearchHoaDon;
    private javax.swing.JPanel pnlSearchHoaDonInput;
    private javax.swing.JPanel pnlSearchSanPham;
    private javax.swing.JPanel pnlSearchSanPhamInput;
    private javax.swing.JScrollPane pnlTableCTHD;
    private javax.swing.JScrollPane pnlTableHoaDon;
    private javax.swing.JScrollPane pnlTableSanPham;
    private javax.swing.JTabbedPane tabPanel;
    private javax.swing.JTable tblCTHD;
    private javax.swing.JTable tblHoaDon;
    private javax.swing.JTable tblSanPham;
    private javax.swing.JTextField txtDonViTinh;
    private javax.swing.JTextField txtGiaSP;
    private javax.swing.JTextField txtMaKH_HD;
    private javax.swing.JTextField txtMaNV_HD;
    private javax.swing.JTextField txtMaSP;
    private javax.swing.JTextField txtMaSP_CTHD;
    private javax.swing.JTextField txtNuocSX;
    private javax.swing.JTextField txtSL;
    private javax.swing.JTextField txtSearchMaKH_HD;
    private javax.swing.JTextField txtSearchMaNV_HD;
    private javax.swing.JTextField txtSearchMaSP;
    private javax.swing.JTextField txtSearchMaSP_CTHD;
    private javax.swing.JTextField txtSearchNuocSX;
    private javax.swing.JTextField txtSearchSL;
    private javax.swing.JTextField txtSearchSoHD;
    private javax.swing.JTextField txtSearchSoHD_CTHD;
    private javax.swing.JTextField txtSearchTenSP;
    private javax.swing.JTextField txtSoHD;
    private javax.swing.JTextField txtSoHD_CTHD;
    private javax.swing.JTextField txtTenSP;
    private javax.swing.JTextField txtTriGia;
    // End of variables declaration//GEN-END:variables


}
